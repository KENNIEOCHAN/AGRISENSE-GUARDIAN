#include <DHT.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#include <Keypad.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085.h>

#define DHTPIN 2
#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);

#define MOISTURE_PIN A0
#define GAS_SENSOR_PIN A1
#define FLAME_SENSOR_PIN A2
#define WATER_FLOW_PIN 3

#define PUMP_RELAY_PIN 4
#define HEATER_RELAY_PIN 5
#define VENT_RELAY_PIN 6
#define WATER_SUPPLY_RELAY_PIN 7

#define THRESHOLD_MOISTURE 500 // Example threshold value for moisture sensor
#define THRESHOLD_TEMPERATURE 25 // Example threshold value for temperature sensor
#define THRESHOLD_GAS 500 // Example threshold value for gas sensor
#define THRESHOLD_FLAME 500 // Example threshold value for flame sensor

const byte ROWS = 4; // Four rows
const byte COLS = 3; // Three columns
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
byte rowPins[ROWS] = {16, 17, 18, 19}; // Connect to the row pinouts of the keypad
byte colPins[COLS] = {20, 21, 22}; // Connect to the column pinouts of the keypad
Keypad keypadPhone = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

byte rowPins2[ROWS] = {23, 24, 25, 26}; // Connect to the row pinouts of the keypad
byte colPins2[COLS] = {27, 28, 29}; // Connect to the column pinouts of the keypad
Keypad keypadNAPR = Keypad(makeKeymap(keys), rowPins2, colPins2, ROWS, COLS);

unsigned long lastActivationTime = 0;
boolean relayActive = false;
boolean heaterApproval = false;

void setup() {
  Serial.begin(9600);
  dht.begin();
  
  pinMode(MOISTURE_PIN, INPUT);
  pinMode(GAS_SENSOR_PIN, INPUT);
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(WATER_FLOW_PIN, INPUT);

  pinMode(PUMP_RELAY_PIN, OUTPUT);
  pinMode(HEATER_RELAY_PIN, OUTPUT);
  pinMode(VENT_RELAY_PIN, OUTPUT);
  pinMode(WATER_SUPPLY_RELAY_PIN, OUTPUT);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
}

void loop() {
  // Read sensors
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int moistureLevel = analogRead(MOISTURE_PIN);
  int gasLevel = analogRead(GAS_SENSOR_PIN);
  int flameLevel = analogRead(FLAME_SENSOR_PIN);
  int waterFlow = digitalRead(WATER_FLOW_PIN);

  // Control logic
  if (moistureLevel < THRESHOLD_MOISTURE) {
    activateRelay(PUMP_RELAY_PIN, 120); // Activate pump for 2 minutes (120 seconds)
    recordRelayActivation(PUMP_RELAY_PIN, 120);
  }

  if (temperature < THRESHOLD_TEMPERATURE && heaterApproval) {
    activateRelay(HEATER_RELAY_PIN, 120); // Activate heater for 2 minutes (120 seconds)
    recordRelayActivation(HEATER_RELAY_PIN, 120);
  }

  // Display sensor values on OLED
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Temp: ");
  display.println(temperature);
  display.print("Humidity: ");
  display.println(humidity);
  display.setCursor(0, 20);
  display.print("Moisture: ");
  display.println(moistureLevel);
  display.print("Gas: ");
  display.println(gasLevel);
  display.setCursor(0, 40);
  display.print("Flame: ");
  display.println(flameLevel);
  display.display();

  delay(1000); // Update display every 1 second
  handleKeypadInput();
}

void activateRelay(int pin, unsigned long duration) {
  digitalWrite(pin, HIGH);
  delay(duration * 1000);
  digitalWrite(pin, LOW);
}

boolean heaterApproved() {
  // Implement GSM module logic to check for SMS approval
  // Example logic:
  // Check if a new SMS has been received
  if (newSMSReceived()) {
    // Read the content of the SMS
    String smsContent = readSMSContent();
    
    // Check if the SMS content contains the approval keyword
    if (smsContent.indexOf("APPROVE_HEATER") != -1) {
      heaterApproval = true;
      return true;
    } else if (smsContent.indexOf("DISAPPROVE_HEATER") != -1) {
      heaterApproval = false;
      return false;
    }
  }
  
  // If no approval SMS received or keyword not found, return false
  return false;
}

void recordRelayActivation(int pin, unsigned long duration) {
  unsigned long currentMillis = millis();
  if (!relayActive) {
    lastActivationTime = currentMillis;
    relayActive = true;
  }
  if (currentMillis - lastActivationTime >= duration * 1000) {
    relayActive = false;
    // Record relay activation and duration
    Serial.print("Relay ");
    Serial.print(pin);
    Serial.print(" activated for ");
    Serial.print(duration);
    Serial.println(" seconds.");
  }
}

void handleKeypadInput() {
  char key1 = keypadPhone.getKey();
  char key2 = keypadNAPR.getKey();

  if (key1) {
    // Handle keypadPhone input
    // For example, you can use key presses to control the system
    // E.g., press '1' to activate pump, press '2' to activate heater, etc.
  }

  if (key2) {
    // Handle keypadNAPR input
    // For example, you can use key presses to navigate through the screen or perform other actions
    // E.g., press '1' to shift the screen up, press '2' to shift the screen down, etc.
  }
}

boolean newSMSReceived() {
  // Implement GSM module logic to check for new SMS
  // This is a placeholder, replace it with actual GSM module function
  return false;
}

String readSMSContent() {
  // Implement GSM module logic to read SMS content
  // This is a placeholder, replace it with actual GSM module function
  return "";
}
